package com.protalento.jdbc.implementations;

import java.math.BigInteger;
import java.sql.Types;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;

import com.protalento.entities.User;
import com.protalento.jdbc.DAO;
import com.protalento.jdbc.DataSourceSubclassGenerator;
import com.protalento.jdbc.mappers.TaskMapper;
import com.protalento.jdbc.mappers.UserMapper;

public class UserImp implements DAO<User, String> {
	private static final Logger logger = LogManager.getLogger();

	private static final JdbcTemplate jdbcTemplate = new JdbcTemplate(
			DataSourceSubclassGenerator.getdriDriverManagerDataSource());

	@Override
	public User findById(String email) {
		String sql = "SELECT id, email, passwd FROM users where email = ?";

		try {
			return jdbcTemplate.queryForObject(sql, new UserMapper(), email);
		} catch (Exception e) {
			logger.error("no existing email. Error is:" + e);
		}

		return null;
	}

	@Override
	public Boolean insert(User user) {
		String sql = "INSERT INTO users (email, passwd) VALUES (?, ?)";
		PreparedStatementCreatorFactory preparedStatementCreatorFactory = new PreparedStatementCreatorFactory(sql,
				Types.VARCHAR, Types.VARCHAR);

		Object[] parameters = new Object[] { user.getEmail(), user.getPassword() };

		preparedStatementCreatorFactory.setReturnGeneratedKeys(true);
		preparedStatementCreatorFactory.setGeneratedKeysColumnNames("id");
		PreparedStatementCreator preparedStatementCreator = preparedStatementCreatorFactory
				.newPreparedStatementCreator(parameters);

		GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();

		boolean inserted = jdbcTemplate.update(preparedStatementCreator, generatedKeyHolder) == 1;
		logger.info("inserted User: " + inserted + ", The returned key is: " + generatedKeyHolder.getKeyList());

		user.setId(((BigInteger) generatedKeyHolder.getKeys().get("insert_id")).intValue());
		return inserted;
	}

	@Override
	public Boolean update(User e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean save(User e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean delete(User e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<User> listAll() {
		String query = "SELECT id, email, passwd FROM users";

		List<User> userList = jdbcTemplate.query(query, new UserMapper());
		logger.info("Listing all tasks: " + userList);
		return userList;
	}

	public static void main(String[] args) {

		String email = "user1@gmail.com";
		String password = "User1.1234";

		UserImp userImp = new UserImp();

		User user = User.builder().email(email).password(password).build();

//		logger.info("inserto : " + userImp.insert(user));
//		logger.info("autoGenerated key is: " + user);

		userImp.listAll();

	}

}
